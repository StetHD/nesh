{
  "name": "Nesh",
  "tagline": "An enhanced, extensible, embeddable interactive shell for Node.js",
  "body": "Node Enhanced Shell\r\n===================\r\nAn enhanced extensible interactive interpreter (REPL) for Node.js and languages that compile to Javascript, like CoffeeScript and Babel (ES6/7). Some features:\r\n\r\n * Lightweight & fast\r\n * Tab completion\r\n * Persistent history\r\n * Preloading code within the interpreter\r\n * Built-in convenience functions\r\n * Method introspection via `ctrl-q`\r\n * Easily extensible interactive environment\r\n * Simple to embed in your own applications\r\n * Asynchronous plugin architecture\r\n * Multi-language support (e.g. CoffeeScript, ES6/7)\r\n * Per-user plugin management\r\n\r\n[![Dependency Status](https://gemnasium.com/danielgtaylor/nesh.png)](https://gemnasium.com/danielgtaylor/nesh) [![Build Status](https://travis-ci.org/danielgtaylor/nesh.png?branch=master)](https://travis-ci.org/danielgtaylor/nesh)\r\n\r\nInstallation\r\n------------\r\nYou can install and start using `nesh` with `npm` (note: you may need to use `sudo` to install globally):\r\n\r\n```bash\r\nnpm install -g nesh\r\n\r\n# Run nesh\r\nnesh\r\n\r\n# Run nesh with CoffeeScript\r\nnesh -c\r\n\r\n# Run nesh with ES6 through Babel\r\nnesh -b\r\n```\r\n\r\nIf you wish to use `nesh` within your own project with `require 'nesh'` (i.e. to embed within your app) you can use the following non-global install instead. See Embedding the Interpreter below for more information.\r\n\r\n```bash\r\nnpm install nesh\r\n```\r\n\r\nBasic Usage\r\n-----------\r\nThe `nesh` command starts an interactive interpreter with a default set of plugins loaded. You can type commands and they will be executed, with the output or any errors displayed below the command.\r\n\r\n### Command Help\r\nYou can get a list of options and help via:\r\n\r\n```bash\r\nnesh --help\r\n```\r\n\r\n### Setting a Language\r\nNesh supports multiple languages, and ships with both CoffeeScript and ES6/7 (through Babel) support out of the box. To select a language:\r\n\r\n```bash\r\nnesh --language coffee\r\nnesh --language babel\r\n```\r\n\r\nYou can get a list of supported built-in languages via:\r\n\r\n```bash\r\nnesh --list-languages\r\n```\r\n\r\nAs a shortcut for CoffeeScript, you can use `nesh -c`. It's also pretty easy to set up an alias for this, e.g. `alias cs='nesh -c'` in bash. For ES6, you would use `nesh -b` instead.\r\n\r\n### Setting a Prompt & Welcome Message\r\nA prompt can be set with the `--prompt` parameter, e.g. `nesh --prompt \"test> \"`. The welcome message can be set the same way with the `--welcome` parameter. You can disable the welcome message via e.g. `nesh --no-welcome`.\r\n\r\n### Preloading Code\r\nYou can preload a script with the `--eval` option, which will evaluate either a file or string in the context of the interpreter, so anything that you define will be available in the interpreter after startup. This is similar to using `ipython -i script.py`.\r\n\r\n```bash\r\necho 'var hello = function (name) { return \"Hello, \" + name; }' >hello.js\r\nnesh --eval hello.js\r\n```\r\n\r\nNow you can run `hello('world');` in the interpreter. A string can also be used:\r\n\r\n```bash\r\nnesh --eval \"var test = 1;\"\r\n```\r\n\r\nLanguages other than Javascript can also be used. When using a non-Javascript language, the code loaded will use that language's compile function before running if the loaded filename does not end in `.js`. This means it is possible to load code both in the loaded language and in plain javascript. For example:\r\n\r\n```bash\r\n# Load code from a language-specific file\r\nnesh -c -e hello.coffee\r\nnesh -b -e hello.es6\r\n\r\n# Load code from a plain javascript file\r\nnesh -c -e hello.js\r\n```\r\n\r\nPlugins\r\n-------\r\nPlugins can add functionality to Nesh. Plugins are published via NPM just like any other Node.js package. Plugins published via NPM should use `nesh-` as the naming prefix, which makes them easier to find.\r\n\r\n * [Published plugins](https://npmjs.org/browse/keyword/nesh)\r\n\r\nYou can install and enable new plugins easily:\r\n\r\n```bash\r\n# Install and enable a plugin called nesh-hello\r\nnesh --enable nesh-hello\r\n\r\n# Remove and disable a plugin called nesh-hello\r\nnesh --disable nesh-hello\r\n```\r\n\r\nIt's also possible to blacklist built-in plugins from loading on startup:\r\n\r\n```bash\r\n# Prevent welcome message from ever showing\r\nnesh --disable welcome\r\n```\r\n\r\nYou can see a list of loaded plugins via the `--plugins` option:\r\n\r\n```bash\r\nnesh --plugins\r\n```\r\n\r\nSee the section below on Extending the Interpreter for information on how to write plugins.\r\n\r\nConvenience Functions\r\n---------------------\r\nWhen run from the `nesh` command several built-in convenience functions are available.\r\n\r\n### REPL Commands\r\n\r\n#### .cls\r\nClears the screen\r\n\r\n#### .require module\r\nShortcut for requiring a module and assigning it to a variable of the same name, e.g:\r\n\r\n```js\r\nnesh> .require fs\r\nnesh> fs.readFileSync(...);\r\n```\r\n\r\n#### .doc object or method\r\nGet documentation about an object. Can be invoked with either `.doc` or `ctrl-q`. Pressing `ctrl-q` twice will dump out the source of the object or method.\r\n\r\n```js\r\nnesh> .doc fs.readFileSync\r\n[Function] (path, options)\r\n\r\n// Or with ctrl-q\r\nnesh> path.extname\r\n[Function] (path)\r\n\r\n// And ctrl-q again\r\nfunction (path) {\r\n  return splitPath(path)[3];\r\n}\r\n```\r\n\r\n### Modules\r\n\r\n#### __\r\nExposes the Underscore.js library. Two underscores are used because a single underscore is reserved for the response of the last run command.\r\n\r\n### Hashing\r\n\r\n#### md5 (value)\r\nReturn an MD5 hash of a value as a hexadecimal string.\r\n\r\n#### sha (value)\r\nReturn a SHA1 hash of a value as a hexadecimal string.\r\n\r\n### Random\r\n\r\n#### rand ([start], [end])\r\nGenerate a random number. If neither `start` nor `end` are given, it returns a number between 0 and 1. If only `start` is given, a number between 0 and `start` is returned. Otherwise, a number between `start` and `end` is returned.\r\n\r\n#### randInt ([start], [end])\r\nGenerate a random integer. This is a shortcut for `Math.round(rand(start, end))` and follows the same rules as `rand` for `start` and `end`.\r\n\r\n#### randChoices (choices, [length])\r\nSelect an array of random choices of length `length` from an array `choices`.\r\n\r\n#### randString (length, [charSet])\r\nReturn a random string with characters selected from `charSet`, which defaults to case-sensitive alphanumeric characters.\r\n\r\n#### randHex (length)\r\nReturn a random lowercase hexadecimal string.\r\n\r\n### Number Encoding\r\n\r\n#### bin (value)\r\nConvert a number into a binary string. For example, `bin(22)` would return `'10110'`.\r\n\r\n#### oct (value)\r\nConvert a number into an octal string. For example, `oct(22)` would return `'26'`.\r\n\r\n#### hex (value)\r\nConvert a number into a hexadecimal string. For example, `hex(22)` would return `'16'`.\r\n\r\n### URL Encoding\r\n\r\n#### urlenc (value)\r\nReturn a URL-encoded version of a string. For example, `a+1/%` would become `a%2B1%2F%25`.\r\n\r\n#### urldec (value)\r\nReturn a URL-decoded version of a string. For example, `a%2B1%2F%25` would become `a+1/%`.\r\n\r\nEmbedding the Interpreter\r\n-------------------------\r\nThe Nesh interpreter can be embedded into your application, whether it is written in Javascript, Coffeescript, or another language that runs on Node. For example, to start an interactive CoffeeScript session on stdin/stdout from Javascript with a custom prompt and welcome message:\r\n\r\n```javascript\r\nnesh = require('nesh');\r\n\r\nopts = {\r\n    welcome: 'Welcome!',\r\n    prompt: 'test> '\r\n};\r\n\r\n// Load user configuration\r\nnesh.config.load();\r\n\r\n// Load CoffeeScript\r\nnesh.loadLanguage('coffee');\r\n\r\n// Start the REPL\r\nnesh.start(opts, function (err) {\r\n    if (err) {\r\n        nesh.log.error(err);\r\n    }\r\n});\r\n```\r\n\r\n### Embedding Reference\r\n\r\n#### nesh.version\r\nThe Nesh version.\r\n\r\n#### nesh.config\r\nThe configuration module. See below in the Configuration section for more information.\r\n\r\n#### nesh.defaults\r\nAn object containing default values that are set when no such value is passed to `nesh.start`'s `opts` parameter.\r\n\r\n#### nesh.compile\r\nA function to compile a snippet of code into javascript.\r\n\r\n#### nesh.repl\r\nAn object with a `start` function to create a new REPL-like object. Defaults to the built-in Node.js `repl` module. This can be set when a language is loaded or by plugins to provide extra functionality.\r\n\r\n#### nesh.plugins\r\nA list of loaded plugins. This is usually populated by the `nesh.loadPlugin` function.\r\n\r\n#### nesh.languages ()\r\nGet a list of supported built-in languages that can be passed as strings to `nesh.loadLanguage`.\r\n\r\n#### nesh.loadLanguage (language)\r\nLoad a language to be interpreted, e.g. `coffee` for CoffeeScript. Can also take in a function to be called to load the language. See below in the Extending the Interpreter section for details.\r\n\r\n#### nesh.loadPlugin (plugin)\r\nLoads a plugin by name or as an object - see below in the Extending the Interpreter section for details.\r\n\r\n#### nesh.init (autoload, [callback])\r\nInitialize the Nesh module. If `autoload` is true then a default set of plugins is loaded, as well as any plugins defined in the user configuration in `~/.nesh_config.json`. This function doesn't need to be called explicitly as it will be called by `nesh.start`, but is provided to give you more control over the loading process.\r\n\r\n#### nesh.start ([opts], [callback])\r\nCreate a new nesh REPL with the passed options `opts`. Allowed options include the defaults from the Node REPL module (http://nodejs.org/api/repl.html) as well as the following:\r\n\r\n * `evalData` A javascript string to execute within the REPL context on startup\r\n * `historyFile` A filename in which to store command history\r\n * `historyMaxInputSize` The maximum number of bytes of history to load\r\n * `welcome` A welcome message to be displayed on startup\r\n\r\nConfiguration\r\n-------------\r\nNesh provides a basic configuration system that by default stores data in `~/.nesh_config.json`. This system is usable by plugins, languages, etc. The `nesh` command loads this configuration file on startup. When embedding the interpreter, you may wish to do this as well via the `nesh.config.load()` function.\r\n\r\n### Configuration Reference\r\n\r\n#### nesh.config.path\r\nThe path to the default configuration file location.\r\n\r\n#### nesh.config.reset ()\r\nReset the config to a blank state, i.e. `{}`.\r\n\r\n#### nesh.config.load ([path])\r\nLoads a configuration file. Once loaded, the config may be accessed via `nesh.config.get()`. Note: this may throw errors if parsing the file fails.\r\n\r\n#### nesh.config.save ([path])\r\nSaves a configuration file. Note: this may throw errors if the path cannot be written to, you are over your disk quota, etc.\r\n\r\n#### nesh.config.get ()\r\nGet the currently loaded configuration. This defaults to `{}`.\r\n\r\nLogging\r\n-------\r\nNesh comes with a built-in logging framework to make it easy for plugins to log information. By default, each message will be sent to stdout, which is not ideal for many applications. Therefore, it is possible to modify the logger to provide integration with whatever logging framework your application is using. There are even convenience functions to do so for popular logging frameworks. For example, if your application is using Winston:\r\n\r\n```coffeescript\r\nnesh = require 'nesh'\r\n\r\nnesh.log.winston()\r\n\r\nnesh.start (err) ->\r\n    nesh.log.error err if err\r\n```\r\n\r\nIf using a different logging framework or custom log output, you can manually override the logger functions. For example:\r\n\r\n```coffeescript\r\nnesh = require 'nesh'\r\n\r\n...\r\nnesh.log.log = (level, message) ->\r\n    console.log \"#{level}: #{message}\" if level >= nesh.log.level\r\n\r\nnesh.log.color = false\r\n...\r\n```\r\n\r\n### Logging Reference\r\n\r\n#### nesh.log.DEBUG\r\nThe debug logging level.\r\n\r\n#### nesh.log.INFO\r\nThe informational logging level.\r\n\r\n#### nesh.log.WARN\r\nThe warning logging level.\r\n\r\n#### nesh.log.ERROR\r\nThe error logging level.\r\n\r\n#### nesh.log.level\r\nThe current logging level.\r\n\r\n#### nesh.log.levelName ()\r\nGet the name of the log level, e.g. `'warn'` for `nesh.log.WARN`\r\n\r\n#### nesh.log.log (level, message)\r\nLog a message at a particular level if `nesh.log.level` allows it.\r\n\r\n#### nesh.log.debug (message)\r\nLog a debug message.\r\n\r\n#### nesh.log.info (message)\r\nLog an info message.\r\n\r\n#### nesh.log.warn (message)\r\nLog a warning message.\r\n\r\n#### nesh.log.error (message)\r\nLog an error message.\r\n\r\n#### nesh.log.test ()\r\nReconfigure the logging to store sent messages in `nesh.log.output` and disable console colors. This makes testing log output much simpler.\r\n\r\n#### nesh.log.winston ()\r\nReconfigure the logging to use Winston to output messages.\r\n\r\nExtending the Interpreter\r\n-------------------------\r\nThe Nesh interpreter can be easily extended with new languages and plugins.\r\n\r\nLanguages can be added using the `nesh.loadLanguage` function. New languages should override `nesh.compile`, `nesh.repl`, and probably `nesh.defaults.historyFile`. The `nesh.repl` object should provide a Node REPL-like interface with a `start` function and return a REPL-like object which may be modified by plugins. The `context` object has the following attributes:\r\n\r\n| Attribute | Description                    | Introduced |\r\n| --------- | ------------------------------ | ----------:|\r\n| `nesh`    | A reference to the Nesh module |      1.0.0 |\r\n\r\nFor example:\r\n\r\n```coffeescript\r\nnesh = require 'nesh'\r\nmylang = require 'mylang'\r\n\r\nnesh.loadLanguage (context) ->\r\n    nesh.compile = (data) ->\r\n        # Compile to js here\r\n        mylang.compile data, {bare: true}\r\n    nesh.repl =\r\n        start: (opts) ->\r\n            # Do stuff here!\r\n            opts.eval = mylang.eval\r\n            repl = require('repl').start opts\r\n            # Don't forget to return the REPL!\r\n            return repl\r\n    nesh.defaults.welcome = 'Welcome to my interpreter!'\r\n    nesh.defaults.historyFile = path.join(nesh.config.home, '.mylang_history')\r\n\r\nnesh.start (err) ->\r\n    nesh.log.error err if err\r\n```\r\n\r\nPlugins should set a `name` and `description`. Plugins may also define `setup`, `preStart`, and `postStart` functions that are called when the plugin is loaded, before a REPL is created, and after a REPL has been created respectively. Plugins are loaded via the `nesh.loadPlugin` function. A very simple example plugin written in CoffeeScript might look like this:\r\n\r\n```coffeescript\r\nnesh = require 'nesh'\r\nutil = require 'util'\r\n\r\nmyPlugin =\r\n    name: \"myplugin\"\r\n    description: \"Some description here\"\r\n    setup: (context) ->\r\n        {defaults} = context\r\n        nesh.log.info 'Setting up my plugin! Defaults:'\r\n        nesh.log.info util.inspect defaults\r\n\r\n    preStart: (context) ->\r\n        {options} = context\r\n        nesh.log.info 'About to start the interpreter with these options:'\r\n        nesh.log.info util.inspect options\r\n\r\n    postStart: (context) ->\r\n        {repl} = context\r\n        nesh.log.info 'Interpreter started! REPL:'\r\n        nesh.log.info util.inspect repl\r\n\r\nnesh.loadPlugin myPlugin, (err) ->\r\n    nesh.log.error err if err\r\n\r\n    nesh.start (err) ->\r\n        nesh.log.error err if err\r\n```\r\n\r\nSeveral plugins ship with Nesh, just take a look at the `src/plugins` directory. If these ever need to be removed then you can do so by accessing the `nesh.plugins` array. You can also prevent loading the default set of plugins by manually calling `nesh.init` with `autoload` set to `false`.\r\n\r\n### Asynchronous Plugins\r\nSometimes, a plugin may take actions that must run asynchronously. To support these cases, each of the plugin's functions can take a callback parameter `next` which must be called when finished. For example, if we were loading the welcome message's default value from a database with an asynchronous call:\r\n\r\n```coffeescript\r\nmyPlugin =\r\n    setup: (context, next) ->\r\n        {defaults} = context.nesh\r\n        mongodb.findOne name: 'defaultWelcome', (err, item) ->\r\n            return next(err) if err\r\n\r\n            defaults.welcome = item.message\r\n            next()\r\n```\r\n\r\n### Default Plugins\r\nNesh ships with several default plugins:\r\n\r\n * `autoload` A plugin which automatically loads other plugins\r\n * `builtins` Adds built-in convenience functions to the global context\r\n * `eval` Evaluates javascript in `opts.evalData` in the context of the REPL\r\n * `history` Provides persistent command history for multiple languages\r\n * `version` Adds a `.versions` command to show Node, Nesh, and language versions\r\n * `welcome` Adds a welcome message to the interactive interpreter via `opts.welcome`\r\n\r\n### Plugin Reference\r\n\r\n#### Plugin.setup (context, [next])\r\nCalled when the plugin is first loaded. If `next` is defined, then the function is treated as asyncronous and `next` will be passed a function that must be called when finished. If an error occurs, then the error should be passed to `next`. The `context` passed in is an object containing the values defined below:\r\n\r\n| Attribute | Description                    | Introduced |\r\n| --------- | ------------------------------ | ----------:|\r\n| `nesh`    | A reference to the Nesh module |      1.0.0 |\r\n\r\nThis is a good place to add or modify default values via `context.nesh.defaults`.\r\n\r\n#### Plugin.preStart (context, [next])\r\nCalled when `nesh.start` has been called but before the REPL is created and started. If `next` is defined, then the function is treated as asyncronous and `next` will be passed a function that must be called when finished. If an error occurs, then the error should be passed to `next`. The `context` passed in is an object containing the values defined below:\r\n\r\n| Attribute | Description                        | Introduced |\r\n| --------- | ---------------------------------- | ----------:|\r\n| `nesh`    | A reference to the Nesh module     |      1.0.0 |\r\n| `options` | The options passed to `nesh.start` |      1.0.0 |\r\n\r\nThis is a good place to print out information or modify the passed in options before they are sent to the REPL, e.g. `context.options.welcome = 'foo'`.\r\n\r\n#### Plugin.postStart (context, [next])\r\nCalled when `nesh.start` has been called and the REPL is started. The `repl` passed in is the newly created and started REPL from the `nesh.start` call and includes the `opts` from above as `repl.opts`. If `next` is defined, then the function is treated as asyncronous and `next` will be passed a function that must be called when finished. If an error occurs, then the error should be passed to `next`.\r\n\r\n| Attribute | Description                        | Introduced |\r\n| --------- | ---------------------------------- | ----------:|\r\n| `nesh`    | A reference to the Nesh module     |      1.0.0 |\r\n| `options` | The options passed to `nesh.start` |      1.0.0 |\r\n| `repl`    | The created REPL instance          |      1.0.0 |\r\n\r\nThis is a good place to modify the REPL, e.g. adding new commands, modifying history, listening for specific key strokes, etc.\r\n\r\nDevelopment\r\n-----------\r\nNesh development is easy! Just grab the source with git and start hacking around. Contributions, especially interesting languages and plugins, are always welcome!\r\n\r\n### Building\r\nAfter making changes it is important to run a build step to generate the Javascript which gets loaded when you import the `nesh` module, which makes it work across all Node languages.\r\n\r\n```bash\r\ncake build\r\n```\r\n\r\n### Running a local `nesh`\r\nYou can run the `nesh` command from your local checkout:\r\n\r\n```bash\r\n./bin/nesh.js\r\n```\r\n\r\nIt is also possible to use `npm` to link your local checkout globally (note: this may require `sudo`):\r\n\r\n```bash\r\nnpm link\r\n```\r\n\r\nNow you should be able to run `nesh` from anywhere and have it use your development version.\r\n\r\n### Unit Tests\r\nThe unit test suite can be run via the following:\r\n\r\n```bash\r\ncake test\r\n```\r\n\r\n### Testing new plugins\r\nYou can test out new plugins that have their own NPM package by linking them into the plugins directory:\r\n\r\n```bash\r\nln -s ~/Projects/nesh-myplugin ~/.nesh_modules/node_modules/\r\n```\r\n\r\nThen modify your `~/.nesh_config.json` file to enable the plugin. A minimal configuration looks like the following:\r\n\r\n```javascript\r\n{\r\n    plugins: [\"nesh-myplugin\"]\r\n}\r\n```\r\n\r\nLicense\r\n-------\r\nCopyright (c) 2015 Daniel G. Taylor\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}